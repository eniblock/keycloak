apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "keycloak.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
    app.kubernetes.io/component: keycloak
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.replicas }}
  serviceName: {{ include "keycloak.fullname" . }}-headless
  selector:
    matchLabels:
      {{- include "keycloak.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      labels:
        {{- include "keycloak.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: keycloak
        {{ include "keycloak.db.fullname" . }}-client: "true"
    spec:
      serviceAccountName: {{ include "keycloak.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: keycloak
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /opt/keycloak/bin/kc.sh
          args:
            - start
            - -Djgroups.dns.query=keycloak-headless.{{ .Release.Namespace }}.svc.cluster.local
            - --proxy=edge
            {{- if .Values.global.dev }}
            - --spi-theme-static-max-age=-1
            - --spi-theme-cache-themes=false
            - --spi-theme-cache-templates=false
            {{- end }}
            {{- range $v := .Values.extraArgs }}
            - {{ $v | quote }}
            {{- end }}
          env:
            {{- if .Values.ingress.host }}
            - name: KC_HOSTNAME
              value: {{ .Values.ingress.host }}
            {{- end }}
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.fullname" . }}
                  key: admin-password
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.db.fullname" . }}
                  key: password
            # - name: KEYCLOAK_CREATE_ADMIN_USER
            #   value: "true"
            - name: KEYCLOAK_ADMIN
              value: {{ .Values.adminUser }}
            - name: KC_DB_URL
              value: jdbc:postgresql://{{ include "keycloak.db.fullname" . }}:{{ .Values.db.primary.service.ports.postgresql }}/{{ .Values.db.auth.database }}
            - name: KC_DB_USERNAME
              value: {{ .Values.db.auth.username }}
            - name: KC_DB_URL_HOST
              value: {{ include "keycloak.db.fullname" . }}
            - name: KC_DB_URL_PORT
              value: {{ .Values.db.primary.service.ports.postgresql | quote }}
            - name: KC_DB_URL_DATABASE
              value: {{ .Values.db.auth.database }}
            {{- range $k, $v := .Values.extraEnv }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
          envFrom:
            {{- range $v := .Values.extraEnvFromExistingSecrets }}
            - secretRef:
                name: {{ tpl $v $ }}
            {{- end }}
            {{- range $v := .Values.extraEnvFromExistingConfigMaps }}
            - configMapRef:
                name: {{ tpl $v $ }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /auth/health
              port: http
          startupProbe:
            httpGet:
              path: /auth/health
              port: http
            failureThreshold: 6
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: configurator
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - bash
          args:
            - -c
            - |-
              set -e
              {{- if .Values.global.dev }}
              set -x
              {{- end }}
              cd /tf
              # a first run
              ./tf.sh
              # and update when there is a change
              exec reflex ./tf.sh
          env:
            {{- if .Values.global.dev }}
            - name: DEBUG
              value: "true"
            {{- end }}
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.fullname" . }}
                  key: admin-password
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.db.fullname" . }}
                  key: password
            - name: KEYCLOAK_ADMIN
              value: {{ .Values.adminUser }}
            - name: KC_DB_URL
              value: jdbc:postgresql://{{ include "keycloak.db.fullname" . }}:{{ .Values.db.primary.service.ports.postgresql }}/{{ .Values.db.auth.database }}
            - name: KC_DB_USERNAME
              value: {{ .Values.db.auth.username }}
            - name: KC_DB_URL_HOST
              value: {{ include "keycloak.db.fullname" . }}
            - name: KC_DB_URL_PORT
              value: {{ .Values.db.primary.service.ports.postgresql | quote }}
            - name: KC_DB_URL_DATABASE
              value: {{ .Values.db.auth.database }}
            {{- range $k, $v := .Values.configurator.variables }}
            {{- if or (kindIs "map" $v) (kindIs "slice" $v) }}
            - name: TF_VAR_{{ $k }}
              value: {{ $v | toJson | quote }}
            {{- else }}
            - name: TF_VAR_{{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- end }}
            {{- range $k, $v := .Values.extraEnv }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "keycloak.fullname" . }}-configurator
            {{- range $v := .Values.extraEnvFromExistingSecrets }}
            - secretRef:
                name: {{ tpl $v $ }}
            {{- end }}
            {{- range $v := .Values.extraEnvFromExistingConfigMaps }}
            - configMapRef:
                name: {{ tpl $v $ }}
            {{- end }}
          livenessProbe:
            exec:
              command:
                - ls
                - /tmp/configurator.status
          readinessProbe:
            exec:
              command:
                - grep
                - ok
                - /tmp/configurator.status
          volumeMounts:
            - name: configurator-files
              mountPath: /tf/files
          resources:
            {{- toYaml .Values.configurator.resources | nindent 12 }}
      volumes:
        - name: configurator-files
          configMap:
            name: {{ include "keycloak.fullname" . }}-configurator
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
